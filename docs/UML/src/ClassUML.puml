@startuml

class Window{
    - shared: Shared
    - viewController: ViewController
    - window
    + start()
}

class Shared{
    + viewController: ViewController*
    + settings: Settings*
}

class ViewController{
    - shared: Shared
    - currentView: ViewAbstract
    + display()
    + switchTo()
    + getShared()
}

class ViewMenu{
    - viewController: ViewController
    + display()
}

class ViewAbstract <<interface >>{
    # viewController: ViewController
    + {abstract} display()
}

class Settings {
    - resHor: int
    - lang: string
    + getLang()
    + setLang()
    + getResolution(): Vector2u
    + getResHor()
    + setResHor()
}

class Observer {
    - sender: Sender*
    + {abstract}update()
    + Observer(Sender*)
}

class Sender {
    - observers: vector<Observer*>
    + attach(Observer)
    + detach(Observer)
    + notify()
}

class Application{
    - settings: Settings
    - window: Window
    + start()
}

class ViewGame{
    - viewController: ViewController
    + display()
}

class ActionButtonFactory {
    - mapOfActionButtons: map<string, ActionButton*>
    + getActionButton(): ActionButton*
}

class ActionButton{
    - text
    - texture
    + getTexture()
    + getText()
}

class ActionButton1{
    - text
    - texture
    + getTexture()
    + getText()
}

class ActionButtonJson{
    + ~ActionButtonJson()
    - ActionButtonJson()
    + {static} getText(): string
    - {static} textJson: json*
}



Window *-- ViewController
Window *-- Shared

ViewController o-o Shared

ViewAbstract <|.. ViewMenu
ViewAbstract <|.. ViewGame
ViewController o-- ViewAbstract: state

ActionButton <|-- ActionButton1
ActionButton <-- ActionButtonJson
ViewGame --> ActionButtonFactory
ViewGame --> ActionButton: flyweight
ActionButtonFactory ..> ActionButton1: <<create & share>>

Sender <|.. Settings
Sender o->Observer
Observer <|.. Window
Settings --> Window

Application *-- Window
Application *-- Settings

Settings o-- Shared

@enduml