@startuml

class Window{
    - shared: Shared
    - viewController: ViewController
    - window
    + start()
}

class Shared{
    + viewController: ViewController*
    + settings: Settings*
    + lang: JsonLang
    + model: Model
}

class ViewController{
    - shared: Shared
    - currentView: ViewAbstract
    + display()
    + switchTo()
    + getShared()
}

class ViewMenu{
    - viewController: ViewController
    + display()
}

class ViewAbstract <<interface >>{
    # viewController: ViewController
    + {abstract} display()
}

class Settings {
    - resHor: int
    - lang: string
    + getLang()
    + setLang()
    + getResolution(): Vector2u
    + getResHor()
    + setResHor()
}

class Observer {
    - sender: Sender*
    + {abstract}update()
    + Observer(Sender*)
}

class Sender {
    - observers: vector<Observer*>
    + attach(Observer)
    + detach(Observer)
    + notify()
}

class Application{
    - settings: Settings
    - window: Window
    + start()
}

class ViewGame{
    - viewController: ViewController
    + display()
}

class ActionButtonFactory {
    - {static} mapOfActionButtons: map<Actions, ActionButton*>
    + {static} getActionButton(): ActionButton*
}

class ActionButton{
    - text
    - texture
    + getTexture()
    + getText()
}

class ConcreteActionButton{
}

class FarmFactory{
    - {static} mapOfFarms: map<FarmEnum, Farm*>
    + {static} getFarm(): Farm*
}

class Farm{
    - texture
    + getTexture()
}
class ConcreteFarm{
}

class UpgradeFactory{
    - {static} mapOfFarms: map<UpgradeEnum, Upgrade*>
    + {static} getUpgrade(): Upgrade*
}

class Upgrade{
    - text
    - texture
    + getTexture()
    + getText()
}

class ConcreteUpgrade{
}

class PlayerTextureFactory{
    - mapOfPlayerTextures: map<int, PlayerTexture*>
    + getPlayerTexture: PlayerTexture*
}

class PlayerTexture{
    - texture: Texture
    - color: Color
    + getTexture(): Texture
    + getColor(): Color
}

class ConcretePlayerTexture{
}

class JsonLang{
    - textJson: Json
    - settings: Settings*
    + getText(): string
    + update()
}

class Model{
    - mapOfActions: std::map<Actions, bool>
    - game: Game*
    + newGame(): void
    + getCurrentPlayer(): Player*
    + selectAction()
    + getMapOfActions() const: std::map<Actions, bool>*
}

class Player {
    - name: string
    - textureId: int
    + warehouse: Warehouse
    + getName(): string
    + getPlayerTexture(): Texture
    + setFarm()
    + getFarm(): vector<vector<FarmEnum, ...> ...>
    + addSheep()
    + transformSheepIntoFood()
    + addUpgrade()
    + feedFamily()
    + getRequireFeed()
    + upgradeHouseClay()
    + upgradeHouseStone()
}

class Warehouse {
    + food: Resource
    + wheat: Resource
    + vegetable: Resource
    + clay: Resource
    + wood: Resource
    + stone: Resource
    + reed: Resource
    + sheep: Resource
    + swine: Resource
    + cow: Resource
    + begCard: Resource
}

class Resource {
    - value: unsigned int
    + getResource(): unsigned int
    + addResource()
    + decreaseResource(): bool
}

class Game {
    - players: vector<Player>
}

class GameStrategy <<interface>> {
    + nextAction()
    + generateNextTourAction()
    + getMapOfActions()
}

class ConcreteGameStrategy {

}

class Points {
    + getFamilyMembers()
    + getSheep()
    + getHouse()
}

class AbstractList {
    + createIterator()
    + count()
    + append()
    + remove()
}

class Iterator {
    + first()
    + next()
    + isDone()
    + currentItem()
}


Window *-- ViewController
Window *-- Shared

ViewController o-o Shared
Shared *-- JsonLang
JsonLang --|> Observer

ViewAbstract <|.. ViewMenu
ViewAbstract <|.. ViewGame
ViewController o-- ViewAbstract: state

PlayerTexture <|-- ConcretePlayerTexture
ViewMenu --> PlayerTextureFactory
ViewMenu --> PlayerTexture: flyweight
PlayerTextureFactory ..> ConcretePlayerTexture: <<create & share>>

ActionButton <|-- ConcreteActionButton
ViewGame --> ActionButtonFactory
ViewGame --> ActionButton: flyweight
ActionButtonFactory ..> ConcreteActionButton: <<create & share>>

Farm <|-- ConcreteFarm
ViewGame --> FarmFactory
ViewGame --> Farm: flyweight
FarmFactory ..> ConcreteFarm: <<create & share>>

Upgrade <|-- ConcreteUpgrade
ViewGame --> UpgradeFactory
ViewGame --> Upgrade: flyweight
UpgradeFactory ..> ConcreteUpgrade: <<create & share>>

Sender <|-- Settings
Sender o-- Observer
Observer <|-- Window

Application *-- Window
Application *-- Settings

Settings --o Shared

Shared *-- Model
Model *-- Game
Game *-- Player

Player o-- Warehouse
Warehouse o-- Resource

Game *-- GameStrategy
GameStrategy <|.. ConcreteGameStrategy

Points o-- Player

Game --> AbstractList
Game --> Iterator
PlayerList --|> AbstractList
PlayerIterator --|> Iterator
PlayerList <-- PlayerIterator
PlayerList ..> PlayerIterator

@enduml