@startuml

class Window{
    - shared: Shared
    - viewController: ViewController
    - window
    + start()
}

class Shared{
    + viewController: ViewController*
    + settings: Settings*
    + lang: JsonLang
    + model: Model
}

class ViewController{
    - shared: Shared
    - currentView: ViewAbstract
    + display()
    + switchTo()
    + getShared()
}

class ViewMenu{
    - viewController: ViewController
    + display()
}

class ViewAbstract <<interface >>{
    # viewController: ViewController
    + {abstract} display()
}

class Settings {
    - resHor: int
    - lang: string
    + getLang()
    + setLang()
    + getResolution(): Vector2u
    + getResHor()
    + setResHor()
}

class Observer << interface >> {
    - sender: Sender*
    + {abstract}update()
    + Observer(Sender*)
}

class Sender << interface >> {
    - observers: vector<Observer*>
    + attach(Observer)
    + detach(Observer)
    + notify()
}

class Application{
    - settings: Settings
    - window: Window
    + start()
}

class ViewGame{
    - viewController: ViewController
    + display()
}

class ActionButtonFactory {
    - {static} mapOfActionButtons: map<Actions, ActionButton*>
    + {static} getActionButton(): ActionButton*
}

class ActionButton{
    - text
    - texture
    + getTexture()
    + getText()
}

class ActionButton1{
}

class FarmFactory{
    - {static} mapOfFarms: map<FarmEnum, Farm*>
    + {static} getFarm(): Farm*
}

class Farm{
    - texture
    + getTexture()
}
class Farm1{
}

class UpgradeFactory{
    - {static} mapOfFarms: map<UpgradeEnum, Upgrade*>
    + {static} getUpgrade(): Upgrade*
}

class Upgrade{
    - text
    - texture
    + getTexture()
    + getText()
}

class Upgrade1{
}

class PlayerTextureFactory{
    - mapOfPlayerTextures: map<int, PlayerTexture*>
    + getPlayerTexture: PlayerTexture*
}

class PlayerTexture{
    - texture: Texture
    - color: Color
    + getTexture(): Texture
    + getColor(): Color
}

class PlayerTexture1{
}

class JsonLang{
    - textJson: Json
    - settings: Settings*
    + getText(): string
    + update()
}

class Model{
'    - game: Game*
}

class Player {
    - name: string
    - textureId: int
    + getName()
    + getTexture()
}

'class Game{
'    - players: vector<Player>
'}

Window *-- ViewController
Window *-- Shared

ViewController o-o Shared
Settings o-- JsonLang
Shared *-- JsonLang
Shared --|> Observer
JsonLang --|> Observer

ViewAbstract <|.. ViewMenu
ViewAbstract <|.. ViewGame
ViewController o-- ViewAbstract: state

PlayerTexture <|-- PlayerTexture1
ViewMenu --> PlayerTextureFactory
ViewMenu --> PlayerTexture: flyweight
PlayerTextureFactory ..> PlayerTexture1: <<create & share>>

ActionButton <|-- ActionButton1
ViewGame --> ActionButtonFactory
ViewGame --> ActionButton: flyweight
ActionButtonFactory ..> ActionButton1: <<create & share>>

Farm <|-- Farm1
ViewGame --> FarmFactory
ViewGame --> Farm: flyweight
FarmFactory ..> Farm1: <<create & share>>

Upgrade <|-- Upgrade1
ViewGame --> UpgradeFactory
ViewGame --> Upgrade: flyweight
UpgradeFactory ..> Upgrade1: <<create & share>>

Sender <|-- Settings
Sender o-- Observer
Observer <|.. Window
Settings --> Window

Application *-- Window
Application *-- Settings

Settings o-- Shared

Shared *-- Model
'Model o-- Game
'Game *-- Player

ViewMenu --- Player
Player --> PlayerTextureFactory
Player --> PlayerTexture: flyweight

@enduml